console.log('deploy...')
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
web3.eth.getAccounts().then(console.log);

let contract = new web3.eth.Contract([{"payable":true,"stateMutability":"payable","type":"fallback"}]);
contract.deploy({
    data: '0x336000556101936100146000396101936000f3fe610007610066565b63c3016391811461001757600080fd5b7f0902f1ac00000000000000000000000000000000000000000000000000000000600052602d3560601c60205261004c6100e6565b61005d60006020518460205161008f565b50505050610192565b60007c010000000000000000000000000000000000000000000000000000000060003504905090565b6000846000811461009f576100dd565b7f23b872dd0000000000000000000000000000000000000000000000000000000060405284606052826080528360a05260193560601c60c052600091505b50949350505050565b60008060408060046000806020515af11561016f5760043560f81c6005356004820260a0031b8060048302610100031c935060423560f81c60008114610133576001811461015157600080fd5b60413560f81c6101496060516040518884610173565b94505061016b565b60413560f81c6101676040516060518884610173565b9450505b5050505b9091565b6000816127100383028061271086020186820204915050949350505050565b', 
    arguments: []
})

newContractInstance = await contract.send({
    from: accounts[0],
    gas: 1500000,
    gasPrice: '30000000000'
    })
    console.log(newContractInstance.options.address)

    
    

